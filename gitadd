#!/bin/dash
#
# gitadd - safe run of (git add .; git commit; git push)
#
# Usage: gitadd [commit message]
#
# When adding too many files to github, error may arise such as
#    remote: fatal: pack exceeds maximum allowed size
# or
#    fatal: The remote end hung up unexpectedly
#
# This command, gitadd, avoids such error by committing less than 100MB data
# for each step. 
# 
# Increasig post buffer size by the following command is also recommended.
#
# git config http.postBuffer 52428800
#
# Related article: Uploading many files to GitHub repository
# English: http://sekika.github.io/2016/06/06/github-many-files/
# Japanese: http://sekika.github.io/2016/06/03/github-many-files/

# Log file
AddLog="/tmp/add.log"
CommitLog="/tmp/commit.log"
PushLog="/tmp/push.log"
rm -f $AddLog $CommitLog $PushLog
# Commit message
message=$@
if [ -z "$message" ]; then
  message="commit by gitadd command"
fi
i=0
# Add all files above 100M to Git Lfs
git lfs install
git lfs track $(echo "$(find . -type f -size +100M && find . -type f -size 100M)" | grep -v "^\./\.git/")
git add --verbose ./.gitattributes 1>>$AddLog 2>>$AddLog
git commit -m "Manage >2G files with Git Lfs" 1>>$CommitLog 2>>$CommitLog; git push 1>>$PushLog 2>>$PushLog
# Commit step by step
while read a b c
do
  total=`find . -type f -size +$a -size -$b | grep -v "^\./\.git/" | wc -l | sed -e 's/ //g'`
  if [ $total -gt "0" ]; then
    echo "$total Files < $b                              "
  fi
  while read num file
  do
    echo "Adding: "`expr $num \* 100 / $total`"% ($num/$total)\r\c"
    git add --verbose "$file" 1>>$AddLog 2>>$AddLog
    if [ `echo $num | grep "$c"` ]; then
      echo "Committing $num                    \r\c"
      git commit -m "$message w/ files of $a<=size<$b ($i)" 1>>$CommitLog 2>>$CommitLog; git push 1>>$PushLog 2>>$PushLog
      i=$((i+1))
    fi
done <<EOF
  $(echo "$(find . -type f -size +$a -size -$b && find . -type f -size $a)" | grep -v "^\./\.git/" | cat -n)
EOF
  if [ $total -gt "0" ]; then
    echo "Last commit of this stage                \r\c"
    git commit -m "$message w/ files of $a<=size<$b ($i)" 1>>$CommitLog 2>>$CommitLog; git push 1>>$PushLog 2>>$PushLog
    i=$((i+1))
  fi
done << _LIST_
0 8k 0000$
8k 80k 000$
80k 800k 00$
800k 8M 0$
8M 100M $
100M 2G $
2G 100G $
_LIST_

echo "Finished"
